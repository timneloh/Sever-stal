import logging
import uuid
import os
import random
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
import json

from config import EVENT_DAYS
import db
import keyboards
from commands import USER_COMMANDS_TEXT, ADMIN_COMMANDS_TEXT
from utils import is_admin, to_main_menu # <-- –ò–ú–ü–û–†–¢ –ò–ó UTILS

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
from day1_handler import start_day1
from day2_handler import start_day2
from day3_handler import start_day3
from day4_handler import start_day4
from day5_handler import start_day5

router = Router()

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====



# ===== –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã =====

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await db.create_user(message.from_user.id, message.from_user.username)
    await state.clear()
    await message.answer_photo(
        photo=types.FSInputFile("img/–°—Ç–∞—Ä—Ç.png"), 
        caption="""
–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è! üëã
–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –Ω–∞ –Ω–∞—à–µ–π –ù–µ–¥–µ–ª–µ –∑–Ω–∞–Ω–∏–π, –ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. –≠—Ç–∞ –Ω–µ–¥–µ–ª—è ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Ç–æ, –∫–∞–∫ –º—ã –æ–±—â–∞–µ–º—Å—è, –∫–∞–∫ —Å–ª—ã—à–∏–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –∫–∞–∫ –¥–æ–Ω–æ—Å–∏–º —Å–≤–æ–∏ –º—ã—Å–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ.
–í–∞—Å –∂–¥–µ—Ç –Ω–∞—Å—ã—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
 ‚Ä¢ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–∏–∑—ã, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
 ‚Ä¢ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å—Å—è –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã
 ‚Ä¢ –≤–µ–±-–Ω–æ–≤–µ–ª–ª–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏ –¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—É—Ç—å –≥–µ—Ä–æ–µ–≤
 ‚Ä¢ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–∏–¥–µ–æ –∏ –∑–≤—É–∫–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤
 ‚Ä¢ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–≤–∏–∑, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á–µ–º—É –Ω–∞—É—á–∏–ª–∏—Å—å –∑–∞ —ç—Ç–∏ –¥–Ω–∏.
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–æ–¥–∫–∞—Å—Ç: –≤–∫–ª—é—á–∞–π—Ç–µ –µ–≥–æ –∑–∞ –∫–æ—Ñ–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–∏—â—É –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –Ω–∞ –¥–µ–Ω—å. üéß

 –í –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏ –≤—ã –≤—ã–π–¥–µ—Ç–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏—ë–º–∞–º–∏, —è—Å–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∏ —É–º–µ–Ω–∏–µ–º —Å–ª—ã—à–∞—Ç—å –∏ –¥–æ–Ω–æ—Å–∏—Ç—å –º—ã—Å–ª–∏ —á—ë—Ç–∫–æ.
–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤—ã? –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è! üöÄ
""",
        reply_markup=keyboards.main_menu_kb()
    )

@router.message(F.text.in_({"–ü–æ–º–æ—â—å", "/help"}))
async def btn_help(message: types.Message):
    await message.answer(USER_COMMANDS_TEXT, parse_mode=None)

@router.message(F.text == "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤")
async def btn_meme_generator(message: types.Message):
    meme_folder = "img/mem"
    memes = [f for f in os.listdir(meme_folder) if os.path.isfile(os.path.join(meme_folder, f))]
    if not memes:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–µ–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return
    
    random_meme = random.choice(memes)
    meme_path = os.path.join(meme_folder, random_meme)
    
    await message.answer_photo(
        photo=types.FSInputFile(meme_path),
        caption="–°–º–µ—Ö ‚Äî –ª—É—á—à–∏–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä"
    )

@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def btn_profile(message: types.Message):
    profile = await db.get_profile(message.from_user.id)
    if not profile:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=keyboards.main_menu_kb())
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º rewards –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
    rewards_val = profile.get('rewards')
    rewards_list = []
    if isinstance(rewards_val, str) and rewards_val:
        rewards_list = json.loads(rewards_val)
    elif isinstance(rewards_val, list):
        rewards_list = rewards_val

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º results –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
    results_val = profile.get('results')
    results_list = []
    if isinstance(results_val, str) and results_val:
        results_list = json.loads(results_val)
    elif isinstance(results_val, list):
        results_list = results_val

    # –õ–æ–≥–∏–∫–∞ –Ω–∞–≥—Ä–∞–¥
    if await db.has_completed_all_days(message.from_user.id):
        if "–ú–∞—Å—Ç–µ—Ä –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π" not in rewards_list:
            rewards_list.append("–ú–∞—Å—Ç–µ—Ä –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π")
    
    rewards_text = ', '.join(rewards_list) if rewards_list else "0"
    results_text = ', '.join(results_list) if results_list else "0"

    caption = (
        f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"ID: <code>{profile['id']}</code>\n"
        f"–õ–æ–≥–∏–Ω: {profile['username'] or '‚Äî'}\n"
        f"–ë–∞–ª–ª—ã: {profile['points']}\n\n"
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> {results_text}\n"
        f"<b>–ù–∞–≥—Ä–∞–¥—ã:</b> {rewards_text}"
    )

    await message.answer_photo(
        photo=types.FSInputFile("img/13.png"),
        caption=caption
    )
    
    # –í—ã–¥–∞—á–∞ Digital Badge –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if "–ú–∞—Å—Ç–µ—Ä –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π" in rewards_list:
        await message.answer_document(
            document=types.FSInputFile("files/Digital_Badge.png"),
            caption="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ Digital Badge."
        )
        await message.answer_document(
            document=types.FSInputFile("files/Certificate.pdf"),
            caption="–ê —Ç–∞–∫–∂–µ –∏–º–µ–Ω–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!"
        )


# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω–µ–π =====

@router.message(F.text == "–ó–∞–¥–∞–Ω–∏—è")
async def btn_start_day(message: types.Message, state: FSMContext):
    await db.create_user(message.from_user.id, message.from_user.username)
    current_day = await db.get_current_day()

    day_starters = {
        1: start_day1,
        2: start_day2,
        3: start_day3,
        4: start_day4,
        5: start_day5,
    }
    
    starter = day_starters.get(current_day)
    if starter:
        await starter(message, state)
    else:
        await message.answer(
            f"–î–µ–Ω—å {current_day}: –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=keyboards.back_to_menu_inline()
        )

@router.callback_query(F.data == "nav:main")
async def nav_main(callback: types.CallbackQuery, state: FSMContext):
    await to_main_menu(callback.message, state)
    await callback.answer()

# ===== Inline-—Ä–µ–∂–∏–º –¥–ª—è "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" =====

@router.inline_query()
async def handle_inline_share(inline_query: InlineQuery):
    query_text = inline_query.query
    if not query_text:
        return

    result = InlineQueryResultArticle(
        id=str(uuid.uuid4()),
        title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        description=query_text,
        input_message_content=InputTextMessageContent(
            message_text=query_text
        ),
        thumb_url="https://w7.pngwing.com/pngs/32/933/png-transparent-steel-industry-logo-severstal-industry-company-text-trademark.png",
    )
    
    await inline_query.answer([result], cache_time=1)

# ===== –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã =====

@router.message(Command("ashelp"))
async def cmd_admin_help(message: types.Message):
    if not is_admin(message.from_user.id): return
    await message.answer(ADMIN_COMMANDS_TEXT, parse_mode=None)

@router.message(Command("setday"))
async def cmd_set_day(message: types.Message):
    if not is_admin(message.from_user.id): return
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setday <–Ω–æ–º–µ—Ä_–¥–Ω—è>")
        return
        
    day = int(args[1])
    if 1 <= day <= EVENT_DAYS:
        await db.set_current_day(day)
        await message.answer("‚úÖ –î–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {day}")
    else:
        await message.answer(f"‚ö†Ô∏è –î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-{EVENT_DAYS}.")

# ===== "–õ–æ–≤–µ—Ü" –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π =====

@router.message()
async def unknown_message(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ /help.")