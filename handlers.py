import logging
from aiogram import Router, types, F
from texts import FUN_INTRO, SERIOUS_INTRO, DISC_PROFILES, DISC_COMBOS, FUN_ARCHETYPES, MOTIVATIONALS
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from random import choice
from config import EVENT_START_DATE, EVENT_DAYS, PODCAST_URL
from db import get_user, create_user, update_points, add_reward, get_profile
from states import Day1States
from texts import DISC_PROFILES, DISC_COMBOS, FUN_ARCHETYPES, MOTIVATIONALS

router = Router()
logging.basicConfig(level=logging.INFO)

# ====================
# –ü–ê–†–ê–ú–ï–¢–†–´ –¢–ï–°–¢–û–í
# ====================

# handlers.py (—Ñ—Ä–∞–≥–º–µ–Ω—Ç)
# --- –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Ä–∞–∑–¥–µ–ª –≤–æ–ø—Ä–æ—Å–æ–≤ ---

DISC_QUESTIONS = [
    # Q1
    {
        "type": "slider",
        "text": "–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ, —Ç—ã‚Ä¶",
        "left": "—Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞—é –≤—Å–µ —Ñ–∞–∫—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é",
        "right": "–ø—Ä–∏–Ω–∏–º–∞—é –±—ã—Å—Ç—Ä–æ –∏ –¥–µ–π—Å—Ç–≤—É—é",
        "cat_l": "C",
        "cat_r": "D"
    },
    # Q2
    {
        "type": "slider",
        "text": "–ù–∞ —Å–æ–≤–µ—â–∞–Ω–∏–∏ —Ç—ã —á–∞—â–µ...",
        "left": "–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–ª–ª–µ–≥",
        "right": "–≤–µ—Å–µ–ª–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é –∏–¥–µ–∏",
        "cat_l": "S",
        "cat_r": "i"
    },
    # Q3
    {
        "type": "mc",
        "text": "–ö–∞–∫—É—é —Ä–æ–ª—å —Ç—ã —á–∞—â–µ –±–µ—Ä—ë—à—å –≤ –ø—Ä–æ–µ–∫—Ç–µ?",
        "options": [
            ("–õ–∏–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞—ë—Ç —Ç–µ–º–ø –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è", "D"),
            ("–°–≤—è–∑—É—é—â–µ–µ –∑–≤–µ–Ω–æ, –º–æ—Ç–∏–≤–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É", "i"),
            ("–¢–æ—Ç, –∫—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ—Ä—è–¥–æ–∫", "S"),
            ("–≠–∫—Å–ø–µ—Ä—Ç, –ø—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–µ—Ç–∞–ª–∏", "C")
        ]
    },
    # Q4
    {
        "type": "slider",
        "text": "–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã?",
        "left": "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å –∏ —è—Å–Ω—ã–π –ø–ª–∞–Ω",
        "right": "–≤–∏–∂—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –±—ã—Å—Ç—Ä–æ –≤–∫–ª—é—á–∞—é—Å—å",
        "cat_l": "S",
        "cat_r": "D"
    },
    # Q5
    {
        "type": "slider",
        "text": "–ö–æ–≥–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å –∫–æ–ª–ª–µ–≥, —Ç—ã‚Ä¶",
        "left": "–ø–æ–¥–±–∏—Ä–∞—é —Ñ–∞–∫—Ç—ã –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã",
        "right": "–≥–æ—Ç–æ–≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –≤–æ–æ–¥—É—à–µ–≤–∏—Ç—å",
        "cat_l": "C",
        "cat_r": "i"
    },
    # Q6
    {
        "type": "mc",
        "text": "–¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Ñ–æ—Ä–º–∞—Ç",
        "options": [
            ("–ß—ë—Ç–∫–∏–µ KPI –∏ —Å–≤–æ–±–æ–¥–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "D"),
            ("–û—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—â–µ–Ω–∏–µ, –º–æ–∑–≥–æ–≤—ã–µ —à—Ç—É—Ä–º—ã", "i"),
            ("–°—Ç–∞–±–∏–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏ –∫–æ–º–∞–Ω–¥–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "S"),
            ("–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –∏ —á–µ–∫-–ª–∏—Å—Ç—ã", "C")
        ]
    },
    # Q7
    {
        "type": "slider",
        "text": "–ü—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ —Ç—ã –æ–±—ã—á–Ω–æ‚Ä¶",
        "left": "–∏—â—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
        "right": "–æ—Ç–∫—Ä—ã—Ç–æ –æ—Ç—Å—Ç–∞–∏–≤–∞—é –ø–æ–∑–∏—Ü–∏—é –∏ –∑–∞–∫—Ä—ã–≤–∞—é —Ç–µ–º—É",
        "cat_l": "S",
        "cat_r": "D"
    },
    # Q8
    {
        "type": "assoc",
        "text": "–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±–ª–∏–∂–µ –ø–æ –¥—É—Ö—É",
        "icons": ["üì¢ –ú–µ–≥–∞—Ñ–æ–Ω", "üõ°Ô∏è –†—É–∫–∞ –ø–æ–º–æ—â–∏", "‚è±Ô∏è –¢–∞–π–º–µ—Ä", "üîé –ß–µ–∫-–ª–∏—Å—Ç"],
        "cats": ["i", "S", "D", "C"]
    },
    # Q9
    {
        "type": "mc",
        "text": "–ö–∞–∫ —Ç—ã –≥–æ—Ç–æ–≤–∏—à—å—Å—è –∫ –≤–∞–∂–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏?",
        "options": [
            ("–°–æ—Å—Ç–∞–≤–ª—è—é —á—ë—Ç–∫–∏–π –ø–ª–∞–Ω –∏ —Ä–µ–ø–µ—Ç–∏—Ä—É—é", "C"),
            ("–°–æ–∑–¥–∞—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã", "i"),
            ("–û–ø—Ä–µ–¥–µ–ª—è—é –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –∞–∫—Ü–µ–Ω—Ç—ã", "D"),
            ("–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂—É –∫–æ–º–∞–Ω–¥—É", "S")
        ]
    },
    # Q10
    {
        "type": "slider",
        "text": "–¢–≤–æ–π —Ä–∞–±–æ—á–∏–π —Ç–µ–º–ø ‚Äî",
        "left": "—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π, –±–µ–∑ –±—Ä–æ—Å–∫–æ–≤ –∏ –ø–∞–Ω–∏–∫–∏",
        "right": "–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π, –ª—é–±–ª—é –≤—ã—Å–æ–∫–∏–π —Ç–µ–º–ø",
        "cat_l": "S",
        "cat_r": "D"
    },
    # Q11
    {
        "type": "mc",
        "text": "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏?",
        "options": [
            ("–†–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "D"),
            ("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å –∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ", "i"),
            ("–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã", "S"),
            ("–¢–æ—á–Ω–æ—Å—Ç—å, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "C")
        ]
    },
    # Q12
    {
        "type": "slider",
        "text": "–ö–∞–∫ —Ç—ã —Ä–µ–∞–≥–∏—Ä—É–µ—à—å –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É?",
        "left": "–ø—Ä–∏–Ω–∏–º–∞—é —Å–ø–æ–∫–æ–π–Ω–æ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é",
        "right": "–≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é –∫–∞–∫ –≤—ã–∑–æ–≤ –∏ –¥–µ–π—Å—Ç–≤—É—é",
        "cat_l": "C",
        "cat_r": "D"
    },
    # Q13
    {
        "type": "slider",
        "text": "–í –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º –æ–±—â–µ–Ω–∏–∏ —Ç—ã‚Ä¶",
        "left": "—Å–∫–æ—Ä–µ–µ —Å–¥–µ—Ä–∂–∞–Ω/—Å–ø–æ–∫–æ–π–Ω—ã–π",
        "right": "–æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ –∑–∞–≤–æ–¥–Ω–æ–π",
        "cat_l": "S",
        "cat_r": "i"
    },
    # Q14
    {
        "type": "mc",
        "text": "–ö–∞–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –ø–æ–ª—É—á–∞—Ç—å?",
        "options": [
            ("–ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É: —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å", "D"),
            ("–í —Ç—ë–ø–ª–æ–π —Ñ–æ—Ä–º–µ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω", "i"),
            ("–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏ –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑–æ–≤", "S"),
            ("–°–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –¥–µ—Ç–∞–ª–∏", "C")
        ]
    },
    # Q15
    {
        "type": "assoc",
        "text": "–ö–∞–∫–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–µ–¥–º–µ—Ç –±–ª–∏–∂–µ —Ç–µ–±–µ?",
        "icons": ["üì¢ –ü–ª–∞–Ω—à–µ—Ç/–º–µ–≥–∞—Ñ–æ–Ω", "‚è∞ –ì–æ—Ä—è—á–∏–π –≥—Ä–∞—Ñ–∏–∫/—á–∞—Å—ã", "‚òï –¢—ë–ø–ª—ã–π –ø–ª–µ–¥/—á–∞—à–∫–∞", "üëì –û—á–∫–∏/–ª—É–ø–∞"],
        "cats": ["i", "D", "S", "C"]
    },
    # Q16
    {
        "type": "slider",
        "text": "–ü–µ—Ä–µ–¥ –±–æ–ª—å—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º —Ç—ã‚Ä¶",
        "left": "—Ä–∞—Å—Å—Ç–∞–≤–ª—è—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é –∑–∞–¥–∞—á–∏",
        "right": "–≤–∑—è–ª—Å—è –±—ã –∑–∞ —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ –∏ —É—Å–∫–æ—Ä–∏–ª—Å—è",
        "cat_l": "C",
        "cat_r": "D"
    },
    # Q17
    {
        "type": "mc",
        "text": "–ö–∞–∫ —Ç—ã –º–æ—Ç–∏–≤–∏—Ä—É–µ—à—å –∫–æ–ª–ª–µ–≥?",
        "options": [
            ("–ü–æ–∫–∞–∑—ã–≤–∞—é —á—ë—Ç–∫–∏–µ —Ü–µ–ª–∏ –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è", "D"),
            ("–í–¥–æ—Ö–Ω–æ–≤–ª—è—é –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —ç–Ω–µ—Ä–≥–∏–µ–π", "i"),
            ("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é –∏ –∑–∞–±–æ—Ç–æ–π", "S"),
            ("–î–∞—é —à–∞–±–ª–æ–Ω—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "C")
        ]
    },
    # Q18
    {
        "type": "slider",
        "text": "–¢–≤–æ–π –∏–¥–µ–∞–ª –∫–æ–º–∞–Ω–¥—ã ‚Äî",
        "left": "—Å–ø–æ–∫–æ–π–Ω–∞—è, –Ω–∞–¥—ë–∂–Ω–∞—è, –≤–∑–∞–∏–º–æ–ø–æ–º–æ–≥–∞—é—â–∞—è",
        "right": "–¥–∏–Ω–∞–º–∏—á–Ω–∞—è, –∞–º–±–∏—Ü–∏–æ–∑–Ω–∞—è, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω–∞—è",
        "cat_l": "S",
        "cat_r": "D"
    }
]


FUN_QUESTIONS = [
    {
        "text": "–ö–∞–∫ —Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—à—å –∫–æ–ª–ª–µ–≥ —É—Ç—Ä–æ–º?",
        "options": [
            ("–û–≥–æ, –≤—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ! üòä", "always_loud"),
            ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞? üëã", "cat_headphones"),
            ("(—Å–º–µ—Ö + GIF) ü§£", "smiley_collector"),
            ("–ö—Ä–∞—Ç–∫–æ: –ø–æ –¥–µ–ª–∞–º ‚úâÔ∏è", "postman"),
        ]
    },
    {
        "text": "–¢–≤–æ–π —Å–ø–æ—Å–æ–± —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–Ω–µ–∑–∞–ø–Ω—ã–µ –ø—Ä–æ—Å—å–±—ã –∫–æ–ª–ª–µ–≥:",
        "options": [
            ("–°—Ä–∞–∑—É –≤–∫–ª—é—á–∞—é—Å—å –∏ —Ä–µ—à–∞—é –∑–∞–¥–∞—á—É üî•", "always_loud"),
            ("–°–Ω–∞—á–∞–ª–∞ –æ–±–¥—É–º—ã–≤–∞—é, –ø–æ—Ç–æ–º –¥–µ–π—Å—Ç–≤—É—é —Å–ø–æ–∫–æ–π–Ω–æ üòº", "cat_headphones"),
            ("–î–æ–±–∞–≤–ª—è—é –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —à—Ç—Ä–∏—Ö –∏–ª–∏ —à—É—Ç–∫—É ü§£", "smiley_collector"),
            ("–ß—ë—Ç–∫–æ —Ñ–∏–∫—Å–∏—Ä—É—é –∑–∞–¥–∞—á—É üìã", "postman"),
        ]
    },
    {
        "text": "–ï—Å–ª–∏ –¥–∞—é—Ç —Å–ª–æ–≤–æ –Ω–∞ 1 –º–∏–Ω—É—Ç—É –Ω–∞ —Å–æ–±—Ä–∞–Ω–∏–∏ ‚Äî —Ç—ã:",
        "options": [
            ("–í–∑—Ä—ã–≤–∞–µ—à—å –∑–∞–ª —ç–º–æ—Ü–∏—è–º–∏ üî•", "always_loud"),
            ("–®—É—Ç–Ω–∏—á–∞–µ—à—å, –Ω–æ –ø–æ –¥–µ–ª—É üé≠", "maskman"),
            ("5 —Ñ–∞–∫—Ç–æ–≤, –±–µ–∑ –≤–æ–¥—ã üìä", "postman"),
            ("–°–¥–µ–ª–∞–ª –º–µ–º ‚Äî –∏ —É—à—ë–ª üê±‚Äçüë§", "smiley_collector"),
        ]
    },
    {
        "text": "–ù–∞ —Ñ–∏–¥–±–µ–∫–µ —Ç—ã —á–∞—â–µ:",
        "options": [
            ("–°–Ω–∞—á–∞–ª–∞ —à—É—Ç–∫–∞, –ø–æ—Ç–æ–º –ø—Ä–∞–≤–¥–∞ üòÑ", "smiley_collector"),
            ("–ü—Ä—è–º–æ –∏ –±—ã—Å—Ç—Ä–æ ‚ö°", "report_raw"),
            ("–°–ø–æ–∫–æ–π–Ω–æ, –≤—ã—Å–ª—É—à–∞—é ‚òï", "cat_headphones"),
            ("–ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –ø–æ–¥ —Å–ª—É—à–∞—Ç–µ–ª—è üé≠", "maskman"),
        ]
    },
    {
        "text": "–¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –≤ —á–∞—Ç–µ:",
        "options": [
            ("GIF —Ç–∞–Ω—Ü—É—é—â–µ–≥–æ –∫–æ—Ç–∞ üê±", "smiley_collector"),
            ("–§–æ—Ç–æ —Ç–≤–æ–µ–≥–æ —Å—Ç–æ–ª–∞ üì∏", "postman"),
            ("–Ø—Ä–∫–∏–π –º–µ–º üòÇ", "always_loud"),
            ("–ù–µ–±—Ä–æ—Å–∫–∞—è –∏–∫–æ–Ω–∫–∞ üîµ", "cat_headphones"),
        ]
    },
    {
        "text": "–ö–∞–∫ —Ç—ã —Ä–µ–∞–≥–∏—Ä—É–µ—à—å –Ω–∞ —Å–ø–æ—Ä—ã?",
        "options": [
            ("–í–∫–ª—é—á–∞—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –∏ –ø—ã—Ç–∞—é—Å—å —É–±–µ–¥–∏—Ç—å üì£", "always_loud"),
            ("–ù–∞—Ö–æ–¥–∏—à—å —à—É—Ç–∫—É üòÖ", "smiley_collector"),
            ("–ì–æ–≤–æ—Ä—é –ø—Ä—è–º–æ –∏ –∑–∞–≤–µ—Ä—à–∞—é —Ç–µ–º—É üî™", "report_raw"),
            ("–û—Ç—Å—Ç—É–ø–∞—é –∏ –Ω–∞–±–ª—é–¥–∞—é üëÄ", "cat_headphones"),
        ]
    },
    {
        "text": "–ü—Ä–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ–º —Å–æ–≤–µ—â–∞–Ω–∏–∏ —Ç—ã:",
        "options": [
            ("–í—Ä—ã–≤–∞–µ—à—å—Å—è —Å –∏–¥–µ—è–º–∏ üí°", "always_loud"),
            ("–ü—Ä–æ–≤–µ—Ä—è–µ—à—å —Ñ–∞–∫—Ç—ã ‚Äî –≥–æ–≤–æ—Ä–∏—à—å –≥–ª–∞–≤–Ω–æ–µ ‚úÖ", "postman"),
            ("–î–µ–ª–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ/—Å—Ç–∏–∫–µ—Ä üìπ", "smiley_collector"),
            ("–î–∞—é —Å–∏–≥–Ω–∞–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è ‚Äî —Å–ª—É—à–∞—é üîá", "cat_headphones"),
        ]
    },
    {
        "text": "–¢–≤–æ–π –ª—é–±–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—â–µ–Ω–∏—è:",
        "options": [
            ("–ö–æ—Ä–æ—Ç–∫–∏–µ —Ä–æ–ª–∏–∫–∏/—Å—Ç–æ—Ä–∏—Å üé¨", "tiktok_fast"),
            ("–ì—Ä–æ–º–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏ –≤ –∑–∞–ª–µ üéô", "always_loud"),
            ("–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∏—Ö–æ ‚úâÔ∏è", "cat_headphones"),
            ("–ß—ë—Ç–∫–∏–µ –ø–∏—Å—å–º–∞/—á–µ–∫-–ª–∏—Å—Ç—ã üìÑ", "postman"),
        ]
    },
    {
        "text": "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–ª–æ–≤–æ —Å–∫–∞–∑–∞—Ç—å –æ –∫–æ–ª–ª–µ–≥–µ:",
        "options": [
            ("–°–¥–µ–ª–∞—é —è—Ä–∫–æ–µ –≤–∏–¥–µ–æ/–∫–æ–ª–ª–∞–∂ üé®", "tiktok_fast"),
            ("–°–∫–∞–∂—É –ø—Ä—è–º–æ, –±–µ–∑ –æ–±–∏–Ω—è–∫–æ–≤ üó°", "report_raw"),
            ("–ü–æ—Ö–≤–∞–ª—é —Ç—ë–ø–ª–æ, –¥–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ü§ù", "maskman"),
            ("–û—Ç–ø—Ä–∞–≤–ª—é –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–∏—Å—å–º–æ ‚úâÔ∏è", "postman"),
        ]
    },
    {
        "text": "–¢—ã –≤ –ª–∞–π–≤–µ/—Å—Ç—Ä–∏–º–µ ‚Äî –∫—Ç–æ —Ç—ã?",
        "options": [
            ("–í–∑—Ä—ã–≤–∞—é —á–∞—Ç —ç–º–æ—Ü–∏—è–º–∏ üî•", "always_loud"),
            ("–§–æ–Ω: —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —É—é—Ç üõã", "cat_headphones"),
            ("–ú–∞—Å–∫–∏, —Ä–æ–ª–∏, –ø–µ—Ä–µ–≤–æ–ø–ª–æ—â–µ–Ω–∏—è üé≠", "maskman"),
            ("–¢–æ—á–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ üìã", "postman"),
        ]
    },
    {
        "text": "–ö–∞–∫ —Ç—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—à—å —Ä–∞–±–æ—á—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É?",
        "options": [
            ("–°—Ç–∏–∫–µ—Ä–æ–º üé≠", "smiley_collector"),
            ("–ö–æ—Ä–æ—Ç–∫–æ: —Å–¥–µ–ª–∞–µ–º –∑–∞–≤—Ç—Ä–∞ üóì", "postman"),
            ("–û–≥—Ä–æ–º–Ω–æ–µ ¬´–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º!¬ª üéâ", "always_loud"),
            ("‚Ä¶ (–Ω–∏—á–µ–≥–æ)", "cat_headphones"),
        ]
    },
    {
        "text": "–¢–≤–æ—è —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ:",
        "options": [
            ("–ó–∞–≤–æ–¥–∏—Ç—å –ª—é–¥–µ–π –∏ –¥–∞–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é ‚ö°", "always_loud"),
            ("–î–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ—á–Ω–æ ‚úâÔ∏è", "postman"),
            ("–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å üòº", "cat_headphones"),
            ("–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ üé≠", "maskman"),
        ]
    }
]




# ==============
# HELPER-—Ñ—É–Ω–∫—Ü–∏–∏
# ==============

def disc_slider_scores(pos, cat_l, cat_r):
    """pos: int [1-5], cat_l ('C'), cat_r('D'), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    res = {cat_l: 6-pos, cat_r: pos}
    return res

def disc_mc_scores(selected, options):
    """selected: –∏–Ω–¥–µ–∫—Å, options: [(—Ç–µ–∫—Å—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏—è)]"""
    cats = [opt[1] for opt in options]
    scores = {c: 1 for c in cats}
    scores[cats[selected]] += 4
    return scores

def disc_assoc_scores(selected, cats):
    """selected: –∏–Ω–¥–µ–∫—Å, cats: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ['i','S','D','C']"""
    scores = {c: 1 for c in cats}
    scores[cats[selected]] += 4
    return scores

def fun_test_add_score(arch_scores, chosen_idx, options):
    """arch_scores: dict, chosen_idx: int, options: [("–¢–µ–∫—Å—Ç", "arch")]"""
    for i, (_, arch) in enumerate(options):
        arch_scores.setdefault(arch, 0)
        arch_scores[arch] += 5 if i == chosen_idx else 1

def disc_result_from_scores(scores):
    ordered = sorted(scores.items(), key=lambda x: -x[1])
    first, fscore = ordered[0]
    second, sscore = ordered[1]
    if fscore - sscore >= 3:
        return first
    else:
        return "".join(sorted([first, second]))

# ==============
# –°–¢–ê–†–¢ –∏ –ü–†–û–§–ò–õ–¨
# ==============

@router.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f'user_{user_id}'
    if not get_user(user_id):
        create_user(user_id, username)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω.")
    else:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π /profile –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ /day1 ‚Äî —Å—Ç–∞—Ä—Ç –¥–Ω—è 1!")

@router.message(Command("profile"))
async def profile_handler(message: types.Message):
    p = get_profile(message.from_user.id)
    if p:
        await message.answer(
            f"–ü—Ä–æ—Ñ–∏–ª—å:\nUsername: {p['username']}\n–ë–∞–ª–ª—ã: {p['points']}\n–ù–∞–≥—Ä–∞–¥—ã: {', '.join(p['rewards']) if p['rewards'] else '–ù–µ—Ç'}"
        )
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")

# ==============
# –î–ï–ù–¨ 1
# ==============

@router.message(Command('day1'))
async def day1_handler(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–¢—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ", callback_data="card_serious")],
            [types.InlineKeyboardButton(text="–¢–≤–æ—ë –ê–ª—å—Ç–µ—Ä-—ç–≥–æ", callback_data="card_fun")]
        ]
    )
    await message.answer("üü¢ –î–µ–Ω—å 1. –î–≤–æ–π–Ω–æ–π —Ç–µ—Å—Ç ¬´–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä & –ê–ª—å—Ç–µ—Ä‚Äë—ç–≥–æ¬ª\n\n–í—ã–±–µ—Ä–∏ —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º:", reply_markup=keyboard)
    await state.set_state(Day1States.CHOOSE_CARD)

@router.callback_query(Day1States.CHOOSE_CARD, F.data == "card_serious")
async def start_serious(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(SERIOUS_INTRO)
    await state.update_data(disc_scores={"D":0, "i":0, "S":0, "C":0}, disc_q=0)
    await ask_next_disc_question(callback.message, state)
    await callback.answer()

@router.callback_query(Day1States.CHOOSE_CARD, F.data == "card_fun")
async def start_fun(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(FUN_INTRO)
    await state.update_data(fun_scores={}, fun_q=0, answers=[])
    await ask_next_fun_question(callback.message, state)
    await callback.answer()

# ========== DISC TEST LOGIC ==========

async def ask_next_disc_question(message, state: FSMContext):
    data = await state.get_data()
    qidx = data.get("disc_q", 0)
    if qidx >= len(DISC_QUESTIONS):
        await finish_disc(message, state)
        return
    q = DISC_QUESTIONS[qidx]
    text = f"–í–æ–ø—Ä–æ—Å {qidx+1}/{len(DISC_QUESTIONS)}\n{q['text']}\n"
    if q["type"] == "slider":
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=f"{q['left']} (1)", callback_data="slider:1")],
                [types.InlineKeyboardButton(text="2", callback_data="slider:2")],
                [types.InlineKeyboardButton(text="3", callback_data="slider:3")],
                [types.InlineKeyboardButton(text="4", callback_data="slider:4")],
                [types.InlineKeyboardButton(text=f"{q['right']} (5)", callback_data="slider:5")]
            ]
        )
        await message.answer(text, reply_markup=keyboard)
        await state.set_state(Day1States.SERIOUS_TEST)
    elif q["type"] == "mc":
        opts = q["options"]
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=txt, callback_data=f"mc:{i}") for i, (txt, _) in enumerate(opts)]
            ]
        )
        await message.answer(text, reply_markup=keyboard)
        await state.set_state(Day1States.SERIOUS_TEST)
    elif q["type"] == "assoc":
        icns = q["icons"]
        cats = q["cats"]
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=icn, callback_data=f"assoc:{i}") for i, icn in enumerate(icns)]
            ]
        )
        await message.answer(text, reply_markup=keyboard)
        await state.set_state(Day1States.SERIOUS_TEST)

@router.callback_query(Day1States.SERIOUS_TEST, F.data.regexp(r"slider:\d"))
async def handle_slider_q(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    score_d = data.get("disc_scores", {"D":0,"i":0,"S":0,"C":0})
    qidx = data["disc_q"]
    pos = int(callback.data.split(":")[1])
    q = DISC_QUESTIONS[qidx]
    for_k = disc_slider_scores(pos, q["cat_l"], q["cat_r"])
    for k in for_k:
        score_d[k] += for_k[k]
    await state.update_data(disc_scores=score_d, disc_q=qidx+1)
    await ask_next_disc_question(callback.message, state)
    await callback.answer()

@router.callback_query(Day1States.SERIOUS_TEST, F.data.regexp(r"mc:\d"))
async def handle_mc_q(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    score_d = data.get("disc_scores", {"D":0,"i":0,"S":0,"C":0})
    qidx = data["disc_q"]
    sel = int(callback.data.split(":")[1])
    q = DISC_QUESTIONS[qidx]
    cat_update = disc_mc_scores(sel, q["options"])
    for k in cat_update:
        score_d[k] += cat_update[k]
    await state.update_data(disc_scores=score_d, disc_q=qidx+1)
    await ask_next_disc_question(callback.message, state)
    await callback.answer()

@router.callback_query(Day1States.SERIOUS_TEST, F.data.regexp(r"assoc:\d"))
async def handle_assoc_q(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    score_d = data.get("disc_scores", {"D":0,"i":0,"S":0,"C":0})
    qidx = data["disc_q"]
    sel = int(callback.data.split(":")[1])
    q = DISC_QUESTIONS[qidx]
    cat_update = disc_assoc_scores(sel, q["cats"])
    for k in cat_update:
        score_d[k] += cat_update[k]
    await state.update_data(disc_scores=score_d, disc_q=qidx+1)
    await ask_next_disc_question(callback.message, state)
    await callback.answer()

async def finish_disc(message, state: FSMContext):
    data = await state.get_data()
    scores = data.get("disc_scores", {"D":0,"i":0,"S":0,"C":0})
    res_type = disc_result_from_scores(scores)
    proftext = DISC_PROFILES[res_type] if res_type in DISC_PROFILES else DISC_COMBOS.get(res_type, {})
    motiv = proftext.get('motiv', choice(MOTIVATIONALS))
    tips = proftext.get("tips", ["–°–æ–≤–µ—Ç 1", "–°–æ–≤–µ—Ç 2", "–°–æ–≤–µ—Ç 3"])
    msg = f"<b>{proftext.get('title','–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')}</b>\n\n{proftext.get('desc_1','')}\n{proftext.get('desc_2','')}\n\n"
    msg += "üí°<b>3 —Å–æ–≤–µ—Ç–∞:</b>\n" + "\n".join([f"- {t}" for t in tips])
    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç/—à–∞—Ä–∏–Ω–≥/–ø–æ–¥–∫–∞—Å—Ç/–ø–æ–≤—Ç–æ—Ä
    share_url = f"https://t.me/share/url?url=&text={proftext.get('title','')}: {motiv}"
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=share_url)],
            [types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç", callback_data="restart_test")],
            [types.InlineKeyboardButton(text="–ü–æ—Å–ª—É—à–∞—Ç—å –ø–æ–¥–∫–∞—Å—Ç (5 –º–∏–Ω)", url=PODCAST_URL)]
        ]
    )
    await message.answer(msg, reply_markup=keyboard)
    await message.answer(f"–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è: <i>{motiv}</i>")
    update_points(message.from_user.id, 10)
    await message.answer("+10 –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ!")
    await state.set_state(Day1States.SHOW_RESULT)

@router.callback_query(Day1States.SHOW_RESULT, F.data == "restart_test")
async def restart_test(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç:")
    await day1_handler(callback.message, state)
    await callback.answer()

# ========== FUN TEST LOGIC ==========

async def ask_next_fun_question(message, state: FSMContext):
    data = await state.get_data()
    qidx = data.get("fun_q", 0)
    if qidx >= len(FUN_QUESTIONS):
        await finish_fun_test(message, state)
        return
    q = FUN_QUESTIONS[qidx]
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=txt, callback_data=f"fun:{i}") for i, (txt, _) in enumerate(q["options"])]
        ]
    )
    await message.answer(f"–í–æ–ø—Ä–æ—Å {qidx+1}/{len(FUN_QUESTIONS)}\n{q['text']}", reply_markup=keyboard)
    await state.set_state(Day1States.FUN_TEST)

@router.callback_query(Day1States.FUN_TEST, F.data.regexp(r"fun:\d"))
async def handle_fun_q(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    qidx = data.get("fun_q", 0)
    scores = data.get("fun_scores", {})
    sel_idx = int(callback.data.split(":")[1])
    fun_test_add_score(scores, sel_idx, FUN_QUESTIONS[qidx]["options"])
    await state.update_data(fun_scores=scores, fun_q=qidx+1)
    await ask_next_fun_question(callback.message, state)
    await callback.answer()

async def finish_fun_test(message, state: FSMContext):
    data = await state.get_data()
    scores = data.get("fun_scores", {})
    top = max(scores.items(), key=lambda x: x[1])[0] if scores else "always_loud"
    arch = FUN_ARCHETYPES[top]
    share_url = f"https://t.me/share/url?url=&text=–ú–æ–π –¥–∏–∞–≥–Ω–æ–∑: {arch['title']} ‚Äî {arch['share']}"
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=share_url)],
            [types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç", callback_data="restart_test")],
        ]
    )
    await message.answer(f"<b>{arch['title']}</b>\n\n{arch['desc']}\n\n–°–æ–≤–µ—Ç: {arch['advice']}", reply_markup=keyboard)
    update_points(message.from_user.id, 10)
    await message.answer("+10 –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ!")
    await state.set_state(Day1States.SHOW_RESULT)

# ========== –ú–∏–Ω–∏-–∑–∞–¥–∞–Ω–∏–µ ==========

# (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞)

from aiogram.filters import CommandObject

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤ ‚Äî –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏
ADMINS = {1995633871}  # <== —Å—é–¥–∞ —Å–≤–æ–∏ Telegram ID

def is_admin(user_id: int):
    return user_id in ADMINS

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç–∞)
current_day = 1

@router.message(Command("addpoints"))
async def cmd_add_points(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpoints <user_id> <points>")
        return
    try:
        user_id = int(args[1])
        points = int(args[2])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞.")
        return

    user = get_user(user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    update_points(user_id, points)
    await message.answer(f"{points} –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

@router.message(Command("skipday"))
async def cmd_skip_day(message: types.Message):
    global current_day
    if not is_admin(message.from_user.id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    if current_day < EVENT_DAYS:
        current_day += 1
        await message.answer(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å: –î–µ–Ω—å {current_day}")
    else:
        await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω—å —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.")

@router.message(Command("setday"))
async def cmd_set_day(message: types.Message):
    global current_day
    if not is_admin(message.from_user.id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setday <–Ω–æ–º–µ—Ä_–¥–Ω—è>")
        return
    try:
        day = int(args[1])
    except ValueError:
        await message.answer("–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if 1 <= day <= EVENT_DAYS:
        current_day = day
        await message.answer(f"–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {current_day}.")
    else:
        await message.answer(f"–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {EVENT_DAYS}.")

@router.message(Command("resetdb"))
async def cmd_reset_db(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞")
