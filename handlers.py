# handlers.py
import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import json  # –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

from config import EVENT_START_DATE, EVENT_DAYS, simulated_day_offset
from db import get_user, create_user, update_points, add_reward, get_profile
from states import Day1States

router = Router()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (—Å —Å–∏–º—É–ª—è—Ü–∏–µ–π)
def get_current_day():
    today = datetime.now().date()
    start_date = datetime.strptime(EVENT_START_DATE, '%Y-%m-%d').date()
    simulated_date = start_date + timedelta(days=simulated_day_offset)
    day = (today - start_date).days + 1 + simulated_day_offset
    if 1 <= day <= EVENT_DAYS:
        return day
    return 0  # –ù–µ –≤ –ø–µ—Ä–∏–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è

# /start
@router.message(Command('start'))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    user = get_user(user_id)
    if not user:
        create_user(user_id, username or f'user_{user_id}')
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω.")
    else:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è, /day1 –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –¥–Ω—è 1.")

# /profile
@router.message(Command('profile'))
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    profile = get_profile(user_id)
    if profile:
        rewards_str = ', '.join(profile['rewards']) if profile['rewards'] else '–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥'
        await message.answer(
            f"–ü—Ä–æ—Ñ–∏–ª—å:\nUsername: {profile['username']}\n–ë–∞–ª–ª—ã: {profile['points']}\n–ù–∞–≥—Ä–∞–¥—ã: {rewards_str}"
        )
    else:
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π /start.")

# /nextday (–¥–ª—è —Ç–µ—Å—Ç–∞)
@router.message(Command('nextday'))
async def nextday_handler(message: types.Message):
    global simulated_day_offset
    simulated_day_offset += 1
    await message.answer(f"–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é. –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {get_current_day()}")

# /day1
@router.message(Command('day1'))
async def day1_handler(message: types.Message, state: FSMContext):
    current_day = get_current_day()
    if current_day >= 1:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ1 ¬´–¢—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ¬ª", callback_data="card1")],
            [types.InlineKeyboardButton(text="–ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ2 ¬´–¢–≤–æ—ë –ê–ª—å—Ç–µ—Ä‚Äë—ç–≥–æ¬ª", callback_data="card2")]
        ])
        await message.answer("–î–µ–Ω—å 1: –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫—É!", reply_markup=keyboard)
        await state.set_state(Day1States.CHOOSE_CARD)
    else:
        await message.answer("–î–µ–Ω—å 1 –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
@router.callback_query(Day1States.CHOOSE_CARD)
async def choose_card_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        if callback.data == "card1":
            await callback.message.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Ä—å—ë–∑–Ω—ã–π —Ç–µ—Å—Ç DiSC!")
            await state.set_state(Day1States.SERIOUS_TEST)
            await state.update_data(test_type="serious", answers=[], question_num=0)
            await ask_serious_question(callback.message, state)
        elif callback.data == "card2":
            await callback.message.answer("–ù–∞—á–∏–Ω–∞–µ–º —à—É—Ç–æ—á–Ω—ã–π —Ç–µ—Å—Ç!")
            await state.set_state(Day1States.FUN_TEST)
            await state.update_data(test_type="fun", answers=[], question_num=0)
            await ask_fun_question(callback.message, state)
        await callback.answer()
    except Exception as e:
        logging.error(f"Error in choose_card: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.")

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–µ—Ä—å—ë–∑–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–ø—Ä–∏–º–µ—Ä 15 –≤–æ–ø—Ä–æ—Å–æ–≤, —É–ø—Ä–æ—â—ë–Ω–Ω–æ)
serious_questions = [
    {"text": "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –¥–æ–º–∏–Ω–∏—Ä—É–µ—à—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö? (1-10)", "type": "slider", "area": "D"},
    # –î–æ–±–∞–≤—å –µ—â—ë 14 –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, —Å —Ç–∏–ø–∞–º–∏: slider, multiple (—Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π), association (—Ç–µ–∫—Å—Ç)
    # –î–ª—è –ø–æ–ª–Ω–æ—Ç—ã: –≤—Å–µ–≥–æ 15, –ø–æ 3-4 –Ω–∞ –æ–±–ª–∞—Å—Ç—å (D, i, S, C)
    # ... (—è —Å–æ–∫—Ä–∞—Ç–∏–ª –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —Ä–∞—Å—à–∏—Ä—å)
] * 15  # Placeholder: –ø–æ–≤—Ç–æ—Ä–∏ –¥–ª—è 15

async def ask_serious_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    q_num = data.get('question_num', 0)
    if q_num < len(serious_questions):
        q = serious_questions[q_num]
        await message.answer(q['text'])  # –î–ª—è slider/multiple –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ: —Ç–µ–∫—Å—Ç–æ–º)
    else:
        await calculate_serious_result(message, state)

async def calculate_serious_result(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answers = data.get('answers', [])
    # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞: —Å—É–º–º–∏—Ä—É–π –ø–æ –æ–±–ª–∞—Å—Ç—è–º, –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä, max(score_D, i, S, C))
    # –ü—Ä–∏–º–µ—Ä —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π:
    profile = "iS"  # –†–∞—Å—Å—á–∏—Ç–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ answers
    result = f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚Äî {profile}: —Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å, –Ω–æ –∏–Ω–æ–≥–¥–∞ –º–µ–¥–ª–∏—à—å —Å —Ä–µ—à–µ–Ω–∏—è–º–∏. –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∞–∫—Ç–∏–∫—É ‚Äú–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞‚Äù.\n–°–æ–≤–µ—Ç—ã: 1. ... 2. ... 3. ..."
    await message.answer(result)
    update_points(message.from_user.id, 10)
    await message.answer("+10 –±–∞–ª–ª–æ–≤! –¢–µ–ø–µ—Ä—å –º–∏–Ω–∏-–∑–∞–¥–∞–Ω–∏–µ.")
    await start_mini_task(message, state)

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è fun_test (7 –≤–æ–ø—Ä–æ—Å–æ–≤)
fun_questions = [
    {"text": "–ö–∞–∫–æ–π —ç–º–æ–¥–∑–∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ–π –¥–µ–Ω—å? üòé –∏–ª–∏ ü§Ø", "type": "choice"},
    # –î–æ–±–∞–≤—å 6 –µ—â—ë
] * 7

async def ask_fun_question(message: types.Message, state: FSMContext):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ serious, —Å callbacks –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º

async def calculate_fun_result(message: types.Message, state: FSMContext):
    # –†–∞—Å—Å—á–∏—Ç–∞–π –∑–∞–±–∞–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä "–†–∞—Ü–∏—è –±–µ–∑ –±–∞—Ç–∞—Ä–µ–µ–∫"
    result = "–¢—ã ‚Äî –†–∞—Ü–∏—è –±–µ–∑ –±–∞—Ç–∞—Ä–µ–µ–∫! üòÜ –î–∏–∞–≥–Ω–æ–∑: ..."
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", url="https://t.me/share/url?url=–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")]
    ])
    await message.answer(result, reply_markup=keyboard)
    await start_mini_task(message, state)

# –ú–∏–Ω–∏-–∑–∞–¥–∞–Ω–∏–µ
async def start_mini_task(message: types.Message, state: FSMContext):
    await message.answer("–ú–∏–Ω–∏-–∑–∞–¥–∞–Ω–∏–µ: –°–∫–∞–∂–∏ ‚Äú—Å–ø–∞—Å–∏–±–æ‚Äù –∫–æ–ª–ª–µ–≥–µ, —Å –∫–æ—Ç–æ—Ä—ã–º –æ–±—ã—á–Ω–æ –Ω–µ –æ–±—â–∞–µ—à—å—Å—è ‚Äî –∏ –æ—Ç–ø–∏—à–∏, —á—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª.")
    await state.set_state(Day1States.MINI_TASK)

@router.message(Day1States.MINI_TASK)
async def mini_task_handler(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç—á—ë—Ç
        update_points(message.from_user.id, 5)
        add_reward(message.from_user.id, "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏")
        await message.answer("+5 –±–∞–ª–ª–æ–≤! –ë–µ–π–¥–∂ '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏' –¥–æ–±–∞–≤–ª–µ–Ω.")
        await state.clear()
    except Exception as e:
        logging.error(f"Error in mini_task: {e}")
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.")
