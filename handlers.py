import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from random import choice
from config import EVENT_START_DATE, EVENT_DAYS, PODCAST_URL
from db import get_user, create_user, update_points, add_reward, get_profile
from states import Day1States
from texts import DISC_PROFILES, DISC_COMBOS, FUN_ARCHETYPES, MOTIVATIONALS

router = Router()
logging.basicConfig(level=logging.INFO)

# ====================
# –ü–ê–†–ê–ú–ï–¢–†–´ –¢–ï–°–¢–û–í
# ====================

DISC_QUESTIONS = [
    # Q1 - Slider
    {
        "type": "slider",
        "text": "–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ, —Ç—ã‚Ä¶",
        "left": "–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞—é –≤—Å–µ —Ñ–∞–∫—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é",
        "right": "–ü—Ä–∏–Ω–∏–º–∞—é –±—ã—Å—Ç—Ä–æ –∏ –¥–µ–π—Å—Ç–≤—É—é",
        "cat_l": "C",
        "cat_r": "D",
    },
    # Q2 - Slider
    {
        "type": "slider",
        "text": "–ù–∞ —Å–æ–≤–µ—â–∞–Ω–∏–∏ —Ç—ã —á–∞—â–µ...",
        "left": "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–ª–ª–µ–≥",
        "right": "–í–µ—Å–µ–ª–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é –∏–¥–µ–∏",
        "cat_l": "S",
        "cat_r": "i",
    },
    # Q3 - MC
    {
        "type": "mc",
        "text": "–ö–∞–∫—É—é —Ä–æ–ª—å —Ç—ã —á–∞—â–µ –±–µ—Ä—ë—à—å –≤ –ø—Ä–æ–µ–∫—Ç–µ?",
        "options": [
            ("–õ–∏–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞—ë—Ç —Ç–µ–º–ø", "D"),
            ("–°–≤—è–∑—É—é—â–µ–µ –∑–≤–µ–Ω–æ, –º–æ—Ç–∏–≤–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É", "i"),
            ("–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ—Ä—è–¥–æ–∫", "S"),
            ("–≠–∫—Å–ø–µ—Ä—Ç, –ø—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ", "C"),
        ]
    },
    # ... –∏ –¥–∞–ª–µ–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ –¥–æ 18 –≤–æ–ø—Ä–æ—Å–æ–≤!
]
FUN_QUESTIONS = [
    {
        "text": "–ö–∞–∫ —Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—à—å –∫–æ–ª–ª–µ–≥ —É—Ç—Ä–æ–º?",
        "options": [
            ("–û–≥–æ, –≤—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ! üòä", "always_loud"),
            ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞? üëã", "cat_headphones"),
            ("(—Å–º–µ—Ö + GIF) ü§£", "smiley_collector"),
            ("–ö—Ä–∞—Ç–∫–æ: –ø–æ –¥–µ–ª–∞–º ‚úâÔ∏è", "postman"),
        ]
    },
    # ... –≤—Å–µ–≥–æ 12, –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
]
FUN_ARCHETYP_NAMES = ["always_loud", "cat_headphones", "smiley_collector", "postman",
                      "tiktok_fast", "report_raw", "maskman", "support_colleague"]

# ==============
# –í–°–¢–£–ü–õ–ï–ù–ò–Ø
# ==============

SERIOUS_INTRO = (
    "–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–π —Å—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ!\n\n"
    "–≠—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ DiSC. "
    "–û—Ç–≤–µ—á–∞–π —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ, –Ω–µ –æ–±–¥—É–º—ã–≤–∞–π —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ‚Äî —Ç–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —è—Å–Ω–µ–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ.\n\n"
    "–í —Ñ–∏–Ω–∞–ª–µ —Ç–µ–±—è –∂–¥—ë—Ç —Ç–≤–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ 3 –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ üí°"
)
FUN_INTRO = (
    "–ü–æ—Ä–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ—ë —Å–∫—Ä—ã—Ç–æ–µ –∞–ª—å—Ç–µ—Ä-—ç–≥–æ!\n\n"
    "–ù–µ –¥—É–º–∞–π —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–π —Ç–æ, —á—Ç–æ –±–ª–∏–∂–µ –∫ —Ç–µ–±–µ.\n"
    "–í –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç–∞ —Ç–µ–±—è –∂–¥—ë—Ç –∑–∞–±–∞–≤–Ω—ã–π –∞—Ä—Ö–µ—Ç–∏–ø —Å –∫–æ—Ä–æ—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —à—É—Ç–ª–∏–≤—ã–º ¬´–¥–∏–∞–≥–Ω–æ–∑–æ–º¬ª, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è!"
)

# ==============
# HELPER-—Ñ—É–Ω–∫—Ü–∏–∏
# ==============

def disc_slider_scores(pos, cat_l, cat_r):
    """pos: int [1-5], cat_l ('C'), cat_r('D'), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    res = {cat_l: 6-pos, cat_r: pos}
    return res

def disc_mc_scores(selected, options):
    """selected: –∏–Ω–¥–µ–∫—Å, options: [(—Ç–µ–∫—Å—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏—è)]"""
    cats = [opt[1] for opt in options]
    scores = {c: 1 for c in cats}
    scores[cats[selected]] += 4
    return scores

def disc_assoc_scores(selected, cats):
    """selected: –∏–Ω–¥–µ–∫—Å, cats: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ['i','S','D','C']"""
    scores = {c: 1 for c in cats}
    scores[cats[selected]] += 4
    return scores

def fun_test_add_score(arch_scores, chosen_idx, options):
    """arch_scores: dict, chosen_idx: int, options: [("–¢–µ–∫—Å—Ç", "arch")]"""
    for i, (_, arch) in enumerate(options):
        arch_scores.setdefault(arch, 0)
        arch_scores[arch] += 5 if i == chosen_idx else 1

def disc_result_from_scores(scores):
    ordered = sorted(scores.items(), key=lambda x: -x[1])
    first, fscore = ordered[0]
    second, sscore = ordered[1]
    if fscore - sscore >= 3:
        return first
    else:
        return "".join(sorted([first, second]))

# ==============
# –°–¢–ê–†–¢ –∏ –ü–†–û–§–ò–õ–¨
# ==============

@router.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f'user_{user_id}'
    if not get_user(user_id):
        create_user(user_id, username)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω.")
    else:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π /profile –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ /day1 ‚Äî —Å—Ç–∞—Ä—Ç –¥–Ω—è 1!")

@router.message(Command("profile"))
async def profile_handler(message: types.Message):
    p = get_profile(message.from_user.id)
    if p:
        await message.answer(
            f"–ü—Ä–æ—Ñ–∏–ª—å:\nUsername: {p['username']}\n–ë–∞–ª–ª—ã: {p['points']}\n–ù–∞–≥—Ä–∞–¥—ã: {', '.join(p['rewards']) if p['rewards'] else '–ù–µ—Ç'}"
        )
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")

# ==============
# –î–ï–ù–¨ 1
# ==============

@router.message(Command('day1'))
async def day1_handler(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–¢—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ", callback_data="card_serious")],
            [types.InlineKeyboardButton(text="–¢–≤–æ—ë –ê–ª—å—Ç–µ—Ä-—ç–≥–æ", callback_data="card_fun")]
        ]
    )
    await message.answer("üü¢ –î–µ–Ω—å 1. –î–≤–æ–π–Ω–æ–π —Ç–µ—Å—Ç ¬´–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä & –ê–ª—å—Ç–µ—Ä‚Äë—ç–≥–æ¬ª\n\n–í—ã–±–µ—Ä–∏ —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º:", reply_markup=keyboard)
    await state.set_state(Day1States.CHOOSE_CARD)

@router.callback_query(Day1States.CHOOSE_CARD, F.data == "card_serious")
async def start_serious(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(SERIOUS_INTRO)
    await state.update_data(disc_scores={"D":0, "i":0, "S":0, "C":0}, disc_q=0)
    await ask_next_disc_question(callback.message, state)
    await callback.answer()

@router.callback_query(Day1States.CHOOSE_CARD, F.data == "card_fun")
async def start_fun(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(FUN_INTRO)
    await state.update_data(fun_scores={}, fun_q=0, answers=[])
    await ask_next_fun_question(callback.message, state)
    await callback.answer()

# ========== DISC TEST LOGIC ==========

async def ask_next_disc_question(message, state: FSMContext):
    data = await state.get_data()
    qidx = data.get("disc_q", 0)
    if qidx >= len(DISC_QUESTIONS):
        await finish_disc(message, state)
        return
    q = DISC_QUESTIONS[qidx]
    text = f"–í–æ–ø—Ä–æ—Å {qidx+1}/{len(DISC_QUESTIONS)}\n{q['text']}\n"
    if q["type"] == "slider":
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=f"{q['left']} (1)", callback_data="slider:1")],
                [types.InlineKeyboardButton(text="2", callback_data="slider:2")],
                [types.InlineKeyboardButton(text="3", callback_data="slider:3")],
                [types.InlineKeyboardButton(text="4", callback_data="slider:4")],
                [types.InlineKeyboardButton(text=f"{q['right']} (5)", callback_data="slider:5")]
            ]
        )
        await message.answer(text, reply_markup=keyboard)
        await state.set_state(Day1States.SERIOUS_TEST)
    elif q["type"] == "mc":
        opts = q["options"]
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=txt, callback_data=f"mc:{i}") for i, (txt, _) in enumerate(opts)]
            ]
        )
        await message.answer(text, reply_markup=keyboard)
        await state.set_state(Day1States.SERIOUS_TEST)
    elif q["type"] == "assoc":
        icns = q["icons"]
        cats = q["cats"]
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=icn, callback_data=f"assoc:{i}") for i, icn in enumerate(icns)]
            ]
        )
        await message.answer(text, reply_markup=keyboard)
        await state.set_state(Day1States.SERIOUS_TEST)

@router.callback_query(Day1States.SERIOUS_TEST, F.data.regexp(r"slider:\d"))
async def handle_slider_q(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    score_d = data.get("disc_scores", {"D":0,"i":0,"S":0,"C":0})
    qidx = data["disc_q"]
    pos = int(callback.data.split(":")[1])
    q = DISC_QUESTIONS[qidx]
    for_k = disc_slider_scores(pos, q["cat_l"], q["cat_r"])
    for k in for_k:
        score_d[k] += for_k[k]
    await state.update_data(disc_scores=score_d, disc_q=qidx+1)
    await ask_next_disc_question(callback.message, state)
    await callback.answer()

@router.callback_query(Day1States.SERIOUS_TEST, F.data.regexp(r"mc:\d"))
async def handle_mc_q(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    score_d = data.get("disc_scores", {"D":0,"i":0,"S":0,"C":0})
    qidx = data["disc_q"]
    sel = int(callback.data.split(":")[1])
    q = DISC_QUESTIONS[qidx]
    cat_update = disc_mc_scores(sel, q["options"])
    for k in cat_update:
        score_d[k] += cat_update[k]
    await state.update_data(disc_scores=score_d, disc_q=qidx+1)
    await ask_next_disc_question(callback.message, state)
    await callback.answer()

@router.callback_query(Day1States.SERIOUS_TEST, F.data.regexp(r"assoc:\d"))
async def handle_assoc_q(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    score_d = data.get("disc_scores", {"D":0,"i":0,"S":0,"C":0})
    qidx = data["disc_q"]
    sel = int(callback.data.split(":")[1])
    q = DISC_QUESTIONS[qidx]
    cat_update = disc_assoc_scores(sel, q["cats"])
    for k in cat_update:
        score_d[k] += cat_update[k]
    await state.update_data(disc_scores=score_d, disc_q=qidx+1)
    await ask_next_disc_question(callback.message, state)
    await callback.answer()

async def finish_disc(message, state: FSMContext):
    data = await state.get_data()
    scores = data.get("disc_scores", {"D":0,"i":0,"S":0,"C":0})
    res_type = disc_result_from_scores(scores)
    proftext = DISC_PROFILES[res_type] if res_type in DISC_PROFILES else DISC_COMBOS.get(res_type, {})
    motiv = proftext.get('motiv', choice(MOTIVATIONALS))
    tips = proftext.get("tips", ["–°–æ–≤–µ—Ç 1", "–°–æ–≤–µ—Ç 2", "–°–æ–≤–µ—Ç 3"])
    msg = f"<b>{proftext.get('title','–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')}</b>\n\n{proftext.get('desc_1','')}\n{proftext.get('desc_2','')}\n\n"
    msg += "üí°<b>3 —Å–æ–≤–µ—Ç–∞:</b>\n" + "\n".join([f"- {t}" for t in tips])
    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç/—à–∞—Ä–∏–Ω–≥/–ø–æ–¥–∫–∞—Å—Ç/–ø–æ–≤—Ç–æ—Ä
    share_url = f"https://t.me/share/url?url=&text={proftext.get('title','')}: {motiv}"
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=share_url)],
            [types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç", callback_data="restart_test")],
            [types.InlineKeyboardButton(text="–ü–æ—Å–ª—É—à–∞—Ç—å –ø–æ–¥–∫–∞—Å—Ç (5 –º–∏–Ω)", url=PODCAST_URL)]
        ]
    )
    await message.answer(msg, reply_markup=keyboard)
    await message.answer(f"–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è: <i>{motiv}</i>")
    update_points(message.from_user.id, 10)
    await message.answer("+10 –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ!")
    await state.set_state(Day1States.SHOW_RESULT)

@router.callback_query(Day1States.SHOW_RESULT, F.data == "restart_test")
async def restart_test(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç:")
    await day1_handler(callback.message, state)
    await callback.answer()

# ========== FUN TEST LOGIC ==========

async def ask_next_fun_question(message, state: FSMContext):
    data = await state.get_data()
    qidx = data.get("fun_q", 0)
    if qidx >= len(FUN_QUESTIONS):
        await finish_fun_test(message, state)
        return
    q = FUN_QUESTIONS[qidx]
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=txt, callback_data=f"fun:{i}") for i, (txt, _) in enumerate(q["options"])]
        ]
    )
    await message.answer(f"–í–æ–ø—Ä–æ—Å {qidx+1}/{len(FUN_QUESTIONS)}\n{q['text']}", reply_markup=keyboard)
    await state.set_state(Day1States.FUN_TEST)

@router.callback_query(Day1States.FUN_TEST, F.data.regexp(r"fun:\d"))
async def handle_fun_q(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    qidx = data.get("fun_q", 0)
    scores = data.get("fun_scores", {})
    sel_idx = int(callback.data.split(":")[1])
    fun_test_add_score(scores, sel_idx, FUN_QUESTIONS[qidx]["options"])
    await state.update_data(fun_scores=scores, fun_q=qidx+1)
    await ask_next_fun_question(callback.message, state)
    await callback.answer()

async def finish_fun_test(message, state: FSMContext):
    data = await state.get_data()
    scores = data.get("fun_scores", {})
    top = max(scores.items(), key=lambda x: x[1])[0] if scores else "always_loud"
    arch = FUN_ARCHETYPES[top]
    share_url = f"https://t.me/share/url?url=&text=–ú–æ–π –¥–∏–∞–≥–Ω–æ–∑: {arch['title']} ‚Äî {arch['share']}"
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=share_url)],
            [types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç", callback_data="restart_test")],
        ]
    )
    await message.answer(f"<b>{arch['title']}</b>\n\n{arch['desc']}\n\n–°–æ–≤–µ—Ç: {arch['advice']}", reply_markup=keyboard)
    update_points(message.from_user.id, 10)
    await message.answer("+10 –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ!")
    await state.set_state(Day1States.SHOW_RESULT)

# ========== –ú–∏–Ω–∏-–∑–∞–¥–∞–Ω–∏–µ ==========

# (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞)

